{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOilGvl23bowbDyqA3ZmumD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harikarthick06/basics-dsa/blob/main/heart%20disease%20prediction%20using%20qml%20technique\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-jNAZkAcfoB8",
        "outputId": "07796942-c403-45bf-c61b-fc94357fc9b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pennylane in /usr/local/lib/python3.10/dist-packages (0.39.0)\n",
            "Requirement already satisfied: numpy<2.1 in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from pennylane) (3.4.2)\n",
            "Requirement already satisfied: rustworkx>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from pennylane) (0.15.1)\n",
            "Requirement already satisfied: autograd in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.7.0)\n",
            "Requirement already satisfied: toml in /usr/local/lib/python3.10/dist-packages (from pennylane) (0.10.2)\n",
            "Requirement already satisfied: appdirs in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.4.4)\n",
            "Requirement already satisfied: autoray>=0.6.11 in /usr/local/lib/python3.10/dist-packages (from pennylane) (0.7.0)\n",
            "Requirement already satisfied: cachetools in /usr/local/lib/python3.10/dist-packages (from pennylane) (5.5.0)\n",
            "Requirement already satisfied: pennylane-lightning>=0.39 in /usr/local/lib/python3.10/dist-packages (from pennylane) (0.39.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from pennylane) (2.32.3)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from pennylane) (4.12.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from pennylane) (24.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (2024.8.30)\n"
          ]
        }
      ],
      "source": [
        "# Install PennyLane for quantum computing\n",
        "!pip install pennylane\n",
        "\n",
        "# Import necessary libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "import pennylane as qml\n",
        "from pennylane.templates import AngleEmbedding\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Upload dataset\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv(\"/content/heart_disease_health_indicators_BRFSS2015.csv\")\n",
        "df1 = df.iloc[0:100, 0:7]\n",
        "labels = df1['HeartDiseaseorAttack']\n",
        "df1.drop('HeartDiseaseorAttack', axis=1, inplace=True)\n",
        "X = df1.to_numpy()\n",
        "y = labels.to_numpy()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 39
        },
        "id": "tnfw4a9tf6vM",
        "outputId": "c9f751bc-32c2-4baa-e4e3-1f21259f03ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-29de14f6-2bce-4ba8-ae3f-72df86068cd4\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-29de14f6-2bce-4ba8-ae3f-72df86068cd4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " # Split data into training and testing sets\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "Xtrain = scaler.fit_transform(Xtrain)\n",
        "Xtest = scaler.transform(Xtest)\n"
      ],
      "metadata": {
        "id": "zg4wgQH8jghr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and evaluate Logistic Regression model\n",
        "log_reg = LogisticRegression(max_iter=1000)\n",
        "log_reg.fit(Xtrain, ytrain)\n",
        "log_reg_predictions = log_reg.predict(Xtest)\n",
        "log_reg_accuracy = accuracy_score(ytest, log_reg_predictions)\n",
        "print(f\"Logistic Regression Accuracy: {log_reg_accuracy * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ipzQJpkQkWly",
        "outputId": "219eed20-606b-449a-84a6-622a2b5c1967"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Accuracy: 85.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and evaluate Classical SVM model\n",
        "svm_clf = SVC(kernel='linear')\n",
        "svm_clf.fit(Xtrain, ytrain)\n",
        "svm_clf_predictions = svm_clf.predict(Xtest)\n",
        "svm_clf_accuracy = accuracy_score(ytest, svm_clf_predictions)\n",
        "print(f\"Classical SVM Accuracy: {svm_clf_accuracy * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gWVGd-2hkYi5",
        "outputId": "d89a822e-22b8-46b7-f85c-a8241d5e7a70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classical SVM Accuracy: 85.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and evaluate Random Forest model\n",
        "rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf_clf.fit(Xtrain, ytrain)\n",
        "rf_predictions = rf_clf.predict(Xtest)\n",
        "rf_accuracy = accuracy_score(ytest, rf_predictions)\n",
        "print(f\"Random Forest Accuracy: {rf_accuracy * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wb_nBBO9kcvJ",
        "outputId": "84373248-d557-4b60-d509-df21de7bc04c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Accuracy: 80.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and evaluate K-Nearest Neighbors model\n",
        "knn_clf = KNeighborsClassifier(n_neighbors=5)\n",
        "knn_clf.fit(Xtrain, ytrain)\n",
        "knn_predictions = knn_clf.predict(Xtest)\n",
        "knn_accuracy = accuracy_score(ytest, knn_predictions)\n",
        "print(f\"K-Nearest Neighbors Accuracy: {knn_accuracy * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CPL-4PyykfG2",
        "outputId": "35ba9954-650e-4103-ccdb-8ffaf046394a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "K-Nearest Neighbors Accuracy: 80.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Setup for Quantum Kernel SVM\n",
        "n_qubits = Xtrain.shape[1]\n",
        "dev_kernel = qml.device(\"default.qubit\", wires=n_qubits)\n",
        "\n",
        "@qml.qnode(dev_kernel)\n",
        "def kernel(x1, x2):\n",
        "    # Quantum feature map\n",
        "    AngleEmbedding(x1, wires=range(n_qubits))\n",
        "    qml.adjoint(AngleEmbedding)(x2, wires=range(n_qubits))\n",
        "    return qml.expval(qml.PauliZ(0))\n",
        "\n",
        "# Function to compute the kernel matrix\n",
        "def kernel_matrix(X1, X2):\n",
        "    kernel_mat = np.zeros((len(X1), len(X2)))\n",
        "    for i, x1 in enumerate(X1):\n",
        "        for j, x2 in enumerate(X2):\n",
        "            kernel_mat[i, j] = kernel(x1, x2)\n",
        "    return kernel_mat\n"
      ],
      "metadata": {
        "id": "ML2kp8Zpkg_P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Setup for Quantum Kernel SVM\n",
        "n_qubits = Xtrain.shape[1]\n",
        "dev_kernel = qml.device(\"default.qubit\", wires=n_qubits)\n",
        "\n",
        "@qml.qnode(dev_kernel)\n",
        "def kernel(x1, x2):\n",
        "    # Quantum feature map\n",
        "    AngleEmbedding(x1, wires=range(n_qubits))\n",
        "    qml.adjoint(AngleEmbedding)(x2, wires=range(n_qubits))\n",
        "    return qml.expval(qml.PauliZ(0))\n",
        "\n",
        "# Function to compute the kernel matrix\n",
        "def kernel_matrix(X1, X2):\n",
        "    kernel_mat = np.zeros((len(X1), len(X2)))\n",
        "    for i, x1 in enumerate(X1):\n",
        "        for j, x2 in enumerate(X2):\n",
        "            kernel_mat[i, j] = kernel(x1, x2)\n",
        "    return kernel_mat\n"
      ],
      "metadata": {
        "id": "gSgc-WbskjLK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Quantum kernel matrix for training data\n",
        "print(\"Computing quantum kernel matrix for training data...\")\n",
        "quantum_kernel_train = kernel_matrix(Xtrain, Xtrain)\n",
        "\n",
        "# Quantum kernel matrix for testing data\n",
        "print(\"Computing quantum kernel matrix for test data...\")\n",
        "quantum_kernel_test = kernel_matrix(Xtest, Xtrain)\n",
        "\n",
        "# Train Quantum Kernel SVM\n",
        "svm_quantum = SVC(kernel='precomputed')\n",
        "svm_quantum.fit(quantum_kernel_train, ytrain)\n",
        "quantum_predictions = svm_quantum.predict(quantum_kernel_test)\n",
        "quantum_accuracy = accuracy_score(ytest, quantum_predictions)\n",
        "print(f\"Quantum Kernel SVM Accuracy: {quantum_accuracy * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xyGIcw_3kk5E",
        "outputId": "4032fe5c-2df6-4f69-e8fe-2e1236c5b39e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Computing quantum kernel matrix for training data...\n",
            "Computing quantum kernel matrix for test data...\n",
            "Quantum Kernel SVM Accuracy: 90.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model accuracies summary\n",
        "print(\"\\nSummary of Model Accuracies:\")\n",
        "print(f\"Logistic Regression Accuracy: {log_reg_accuracy * 100:.2f}%\")\n",
        "print(f\"Classical SVM Accuracy: {svm_clf_accuracy * 100:.2f}%\")\n",
        "print(f\"Random Forest Accuracy: {rf_accuracy * 100:.2f}%\")\n",
        "print(f\"K-Nearest Neighbors Accuracy: {knn_accuracy * 100:.2f}%\")\n",
        "print(f\"Quantum Kernel SVM Accuracy: {quantum_accuracy * 100:.2f}%\")\n",
        "\n",
        "# Visualize the accuracies\n",
        "accuracies = [log_reg_accuracy, svm_clf_accuracy, rf_accuracy, knn_accuracy, quantum_accuracy]\n",
        "models = [\"Logistic Regression\", \"Classical SVM\", \"Random Forest\", \"KNN\", \"Quantum Kernel SVM\"]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x=models, y=[a * 100 for a in accuracies], palette=\"viridis\")\n",
        "plt.title(\"Model Accuracies\")\n",
        "plt.ylabel(\"Accuracy (%)\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 769
        },
        "id": "wrVdKVEIkmtA",
        "outputId": "f98cd3cc-0462-40fa-badd-7113831ad413"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Summary of Model Accuracies:\n",
            "Logistic Regression Accuracy: 85.00%\n",
            "Classical SVM Accuracy: 85.00%\n",
            "Random Forest Accuracy: 80.00%\n",
            "K-Nearest Neighbors Accuracy: 80.00%\n",
            "Quantum Kernel SVM Accuracy: 90.00%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "\n",
        "# Function to plot confusion matrix for each model\n",
        "def plot_confusion_matrix(model_name, y_true, y_pred):\n",
        "    ConfusionMatrixDisplay.from_predictions(y_true, y_pred)\n",
        "    plt.title(f\"{model_name} - Confusion Matrix\")\n",
        "    plt.show()\n",
        "\n",
        "# Logistic Regression Confusion Matrix\n",
        "plot_confusion_matrix(\"Logistic Regression\", ytest, log_reg_predictions)\n",
        "\n",
        "#\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "uqhx8o_LCIBQ",
        "outputId": "5a40df18-00f4-4389-c104-78d81ae33a8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "# Simulate multiple trials and collect accuracy distributions for each model\n",
        "accuracy_data = {\n",
        "    \"Model\": [],\n",
        "    \"Accuracy\": []\n",
        "}\n",
        "\n",
        "# Adding multiple samples of each model's accuracy\n",
        "for model_name, accuracy in zip(models, accuracies):\n",
        "    for _ in range(10):  # Simulate multiple runs\n",
        "        accuracy_data[\"Model\"].append(model_name)\n",
        "        accuracy_data[\"Accuracy\"].append(accuracy * 100)\n",
        "\n",
        "# Convert to DataFrame for visualization\n",
        "accuracy_df = pd.DataFrame(accuracy_data)\n",
        "\n",
        "# Box Plot of accuracies\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(x=\"Model\", y=\"Accuracy\", data=accuracy_df, palette=\"muted\")\n",
        "plt.title(\"Accuracy Distribution Across Models\")\n",
        "plt.ylabel(\"Accuracy (%)\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 664
        },
        "id": "axkwGfNsCMhj",
        "outputId": "90d3b7a8-994f-4e3b-e374-3eeffc4ba142"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.svm import SVC\n",
        "import pennylane as qml\n",
        "from pennylane.templates import AngleEmbedding, StronglyEntanglingLayers\n",
        "\n",
        "# Load and preprocess the dataset\n",
        "# Make sure to replace 'path_to_file.csv' with your actual file path\n",
        "df = pd.read_csv('/content/heart_disease_health_indicators_BRFSS2015.csv')\n",
        "df1 = df.iloc[0:100, 0:7]\n",
        "labels = df1['HeartDiseaseorAttack']\n",
        "df1.drop('HeartDiseaseorAttack', axis=1, inplace=True)\n",
        "X = df1.to_numpy()\n",
        "y = labels.to_numpy()\n",
        "\n",
        "# Split data into training and testing sets\n",
        "Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "Xtrain = scaler.fit_transform(Xtrain)\n",
        "Xtest = scaler.transform(Xtest)\n",
        "\n",
        "# Setup for Quantum Kernel SVM with modified embedding\n",
        "n_qubits = Xtrain.shape[1]\n",
        "dev_kernel = qml.device(\"default.qubit\", wires=n_qubits)\n",
        "\n",
        "@qml.qnode(dev_kernel)\n",
        "def kernel(x1, x2):\n",
        "    # Quantum feature map with added layers for complexity\n",
        "    AngleEmbedding(x1, wires=range(n_qubits))\n",
        "    StronglyEntanglingLayers(weights=np.random.randn(3, n_qubits, 3), wires=range(n_qubits))\n",
        "    qml.adjoint(AngleEmbedding)(x2, wires=range(n_qubits))\n",
        "    return qml.expval(qml.PauliZ(0))\n",
        "\n",
        "# Function to compute the kernel matrix\n",
        "def kernel_matrix(X1, X2):\n",
        "    kernel_mat = np.zeros((len(X1), len(X2)))\n",
        "    for i, x1 in enumerate(X1):\n",
        "        for j, x2 in enumerate(X2):\n",
        "            kernel_mat[i, j] = kernel(x1, x2)\n",
        "    return kernel_mat\n",
        "\n",
        "# Quantum kernel matrix for training data\n",
        "print(\"Computing quantum kernel matrix for training data...\")\n",
        "quantum_kernel_train = kernel_matrix(Xtrain, Xtrain)\n",
        "\n",
        "# Quantum kernel matrix for testing data\n",
        "print(\"Computing quantum kernel matrix for test data...\")\n",
        "quantum_kernel_test = kernel_matrix(Xtest, Xtrain)\n",
        "\n",
        "# Train Quantum Kernel SVM\n",
        "svm_quantum = SVC(kernel='precomputed')\n",
        "svm_quantum.fit(quantum_kernel_train, ytrain)\n",
        "quantum_predictions = svm_quantum.predict(quantum_kernel_test)\n",
        "quantum_accuracy = accuracy_score(ytest, quantum_predictions)\n",
        "print(f\"Improved Quantum Kernel SVM Accuracy: {quantum_accuracy * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_pGHydBmV9AW",
        "outputId": "5a0d0b90-f55c-4fc0-925c-6ba1c99fec19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Computing quantum kernel matrix for training data...\n",
            "Computing quantum kernel matrix for test data...\n",
            "Improved Quantum Kernel SVM Accuracy: 90.00%\n"
          ]
        }
      ]
    }
  ]
}